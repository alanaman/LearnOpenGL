#include "main.hpp"



// Try out tutorial code here:

float deltaTime=0.0f;
float lastFrame=0.0f;

Camera camera(glm::vec3(0.0f, 0.0f, 3.0f), 0.0f, 0.0f, 45.0f);

float lastX=400,lastY=300;

unsigned int planeVAO;

void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    glViewport(0, 0, width, height);
}

void processInput(GLFWwindow *window)
{
    if(glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);

    const float cameraSpeed = 2.5f*deltaTime;
    if(glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
        camera.incrementPosition(cameraSpeed * camera.getFrontVector());
    if(glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
        camera.incrementPosition(-cameraSpeed * camera.getFrontVector());
    if(glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
        camera.incrementPosition(-cameraSpeed * camera.getRightVector());
    if(glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
        camera.incrementPosition(cameraSpeed * camera.getRightVector());
}

void mouse_callback(GLFWwindow* window, double xpos, double ypos){
    float xoffset=(float)xpos-lastX;
    float yoffset=(float)ypos-lastY;
    lastX = (float)xpos;
    lastY = (float)ypos;

    const float sensitivity = 0.1f;
    camera.incrementYaw(xoffset * sensitivity);
    camera.incrementPitch(yoffset * sensitivity);
}

void scroll_callback(GLFWwindow* window, double xoffset, double yoffset){
    camera.incrementFov(-(float)yoffset);
}


unsigned int loadCubemap(std::vector<std::string> faces);
void render_object(unsigned int VAO, glm::mat4 model, Shader shader, unsigned int n_verts);
unsigned int loadTexture(const char *path);
void renderScene(const Shader &shader);
void renderCube();
void renderQuad();

int main()
{
    GLFWwindow* window;
    /* Initialize the library */
    if (!glfwInit())
        return -1;
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    /* Create a windowed mode window and its OpenGL context */
    window = glfwCreateWindow(800, 600, "Hello World", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        return -1;
    }
    /* Make the window's context current */
    glfwMakeContextCurrent(window);
    glfwSetCursorPosCallback(window, mouse_callback);
    glfwSetScrollCallback(window, scroll_callback);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }
    
    std::cout<<glGetString(GL_VERSION)<<std::endl;

    GLCall(glEnable(GL_DEPTH_TEST));

    Shader simpleDepthShader("res/shaders/DepthMap.shader");
    Shader TextureRenderer("res/shaders/TextureRenderer.shader");

    float planeVertices[] = {
        // positions            // normals         // texcoords
         25.0f, -0.5f,  25.0f,  0.0f, 1.0f, 0.0f,  25.0f,  0.0f,
        -25.0f, -0.5f,  25.0f,  0.0f, 1.0f, 0.0f,   0.0f,  0.0f,
        -25.0f, -0.5f, -25.0f,  0.0f, 1.0f, 0.0f,   0.0f, 25.0f,

         25.0f, -0.5f,  25.0f,  0.0f, 1.0f, 0.0f,  25.0f,  0.0f,
        -25.0f, -0.5f, -25.0f,  0.0f, 1.0f, 0.0f,   0.0f, 25.0f,
         25.0f, -0.5f, -25.0f,  0.0f, 1.0f, 0.0f,  25.0f, 25.0f
    };
    //
        // float cube_vertices[] = {
        //     // positions          // normals           // texture coords
        //     -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 0.0f,
        //     0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 0.0f,
        //     0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 1.0f,
        //     0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f, 1.0f,
        //     -0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 1.0f,
        //     -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f, 0.0f,

        //     -0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   0.0f, 0.0f,
        //     0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   1.0f, 0.0f,
        //     0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   1.0f, 1.0f,
        //     0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   1.0f, 1.0f,
        //     -0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   0.0f, 1.0f,
        //     -0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,   0.0f, 0.0f,

        //     -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  1.0f, 0.0f,
        //     -0.5f,  0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  1.0f, 1.0f,
        //     -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  0.0f, 1.0f,
        //     -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  0.0f, 1.0f,
        //     -0.5f, -0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
        //     -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  1.0f, 0.0f,

        //     0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  1.0f, 0.0f,
        //     0.5f,  0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  1.0f, 1.0f,
        //     0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  0.0f, 1.0f,
        //     0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  0.0f, 1.0f,
        //     0.5f, -0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
        //     0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  1.0f, 0.0f,

        //     -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  0.0f, 1.0f,
        //     0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  1.0f, 1.0f,
        //     0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  1.0f, 0.0f,
        //     0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  1.0f, 0.0f,
        //     -0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  0.0f, 0.0f,
        //     -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  0.0f, 1.0f,

        //     -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  0.0f, 1.0f,
        //     0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  1.0f, 1.0f,
        //     0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  1.0f, 0.0f,
        //     0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  1.0f, 0.0f,
        //     -0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  0.0f, 0.0f,
        //     -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  0.0f, 1.0f
        // };

        // float skyboxVertices[] = {
        //     // positions          
        //     -1.0f,  1.0f, -1.0f,
        //     -1.0f, -1.0f, -1.0f,
        //      1.0f, -1.0f, -1.0f,
        //      1.0f, -1.0f, -1.0f,
        //      1.0f,  1.0f, -1.0f,
        //     -1.0f,  1.0f, -1.0f,

        //     -1.0f, -1.0f,  1.0f,
        //     -1.0f, -1.0f, -1.0f,
        //     -1.0f,  1.0f, -1.0f,
        //     -1.0f,  1.0f, -1.0f,
        //     -1.0f,  1.0f,  1.0f,
        //     -1.0f, -1.0f,  1.0f,

        //      1.0f, -1.0f, -1.0f,
        //      1.0f, -1.0f,  1.0f,
        //      1.0f,  1.0f,  1.0f,
        //      1.0f,  1.0f,  1.0f,
        //      1.0f,  1.0f, -1.0f,
        //      1.0f, -1.0f, -1.0f,

        //     -1.0f, -1.0f,  1.0f,
        //     -1.0f,  1.0f,  1.0f,
        //      1.0f,  1.0f,  1.0f,
        //      1.0f,  1.0f,  1.0f,
        //      1.0f, -1.0f,  1.0f,
        //     -1.0f, -1.0f,  1.0f,

        //     -1.0f,  1.0f, -1.0f,
        //      1.0f,  1.0f, -1.0f,
        //      1.0f,  1.0f,  1.0f,
        //      1.0f,  1.0f,  1.0f,
        //     -1.0f,  1.0f,  1.0f,
        //     -1.0f,  1.0f, -1.0f,

        //     -1.0f, -1.0f, -1.0f,
        //     -1.0f, -1.0f,  1.0f,
        //      1.0f, -1.0f, -1.0f,
        //      1.0f, -1.0f, -1.0f,
        //     -1.0f, -1.0f,  1.0f,
        //      1.0f, -1.0f,  1.0f
        // };

        // glm::vec3 cubePositions[] = {
        //     glm::vec3( 0.0f,  0.0f,  0.0f), 
        //     glm::vec3( 2.0f,  5.0f, -15.0f), 
        //     glm::vec3(-1.5f, -2.2f, -2.5f),  
        //     glm::vec3(-3.8f, -2.0f, -12.3f),  
        //     glm::vec3( 2.4f, -0.4f, -3.5f),  
        //     glm::vec3(-1.7f,  3.0f, -7.5f),  
        //     glm::vec3( 1.3f, -2.0f, -2.5f),  
        //     glm::vec3( 1.5f,  2.0f, -2.5f), 
        //     glm::vec3( 1.5f,  0.2f, -1.5f), 
        //     glm::vec3(-1.3f,  1.0f, -1.5f)  
        // };

        // glm::vec3 pointLightPositions[] = {
        //     glm::vec3( 0.7f,  0.2f,  2.0f),
        //     glm::vec3( 2.3f, -3.3f, -4.0f),
        //     glm::vec3(-4.0f,  2.0f, -12.0f),
        //     glm::vec3( 0.0f,  0.0f, -3.0f)
        // };
    //
    // plane VAO
    unsigned int planeVBO;
        GLCall(glGenVertexArrays(1, &planeVAO));
        GLCall(glGenBuffers(1, &planeVBO));
        GLCall(glBindVertexArray(planeVAO));
        GLCall(glBindBuffer(GL_ARRAY_BUFFER, planeVBO));
        GLCall(glBufferData(GL_ARRAY_BUFFER, sizeof(planeVertices), planeVertices, GL_STATIC_DRAW));
        GLCall(glEnableVertexAttribArray(0));
        GLCall(glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)0));
        GLCall(glEnableVertexAttribArray(1));
        GLCall(glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)(3*sizeof(float))));
        GLCall(glEnableVertexAttribArray(2));
        GLCall(glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)(6*sizeof(float))));
        glBindVertexArray(0);
    //
        // // cube VAO
        // unsigned int cubeVAO, cubeVBO;
        //     GLCall(glGenVertexArrays(1, &cubeVAO));
        //     GLCall(glGenBuffers(1, &cubeVBO));
        //     GLCall(glBindVertexArray(cubeVAO));
        //     GLCall(glBindBuffer(GL_ARRAY_BUFFER, cubeVBO));
        //     GLCall(glBufferData(GL_ARRAY_BUFFER, sizeof(cube_vertices), cube_vertices, GL_STATIC_DRAW));
        //     GLCall(glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)0));
        //     GLCall(glEnableVertexAttribArray(0));
        //     GLCall(glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)(3*sizeof(float))));
        //     GLCall(glEnableVertexAttribArray(1));
        //     GLCall(glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8*sizeof(float), (void*)(6*sizeof(float))));
        //     GLCall(glEnableVertexAttribArray(2));

        // // skybox VAO
        // unsigned int skyboxVAO, skyboxVBO;
        //     glGenVertexArrays(1, &skyboxVAO);
        //     glGenBuffers(1, &skyboxVBO);
        //     glBindVertexArray(skyboxVAO);
        //     glBindBuffer(GL_ARRAY_BUFFER, skyboxVBO);
        //     glBufferData(GL_ARRAY_BUFFER, sizeof(skyboxVertices), &skyboxVertices, GL_STATIC_DRAW);
        //     glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
        //     glEnableVertexAttribArray(0);

        // // light VAO
        // unsigned int lightVAO;
        //     glGenVertexArrays(1, &lightVAO);
        //     glBindVertexArray(lightVAO);
        //     glBindBuffer(GL_ARRAY_BUFFER, cubeVBO);
        //     glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
        //     glEnableVertexAttribArray(0);



        //shaders
        // Shader shader("res/shaders/MultiLights.shader");
        // Shader light_shader("res/shaders/LightEmitter.shader");
        // Shader skybox_shader("res/shaders/Skybox.shader");
    //


    unsigned int woodTexture = loadTexture("res/images/containerDiffuse.png");
    // unsigned int specular_texture = loadTexture("res/images/containerSpecular.png");
    //
        //setting shader vars
        // shader.use();   
        // shader.setInt("diffuse_map", 0);
        // shader.setInt("specular_map", 1);
        // shader.setVec3("lightColor",  1.0f, 1.0f, 1.0f);
        // shader.setVec3("objectColor", 1.0f, 0.5f, 0.31f);
        // shader.setVec3("dirLight.direction", -0.2f, -1.0f, -0.3f);
        // shader.setVec3("dirLight.color",  1.0f, 1.0f, 1.0f);
        // for(int i=0;i<4;i++){
        //     shader.setVec3("pointLights[" + std::to_string(i) + "].position", pointLightPositions[i]);
        //     shader.setVec3("pointLights[" + std::to_string(i) + "].color",  1.0f, 1.0f, 1.0f);
        //     shader.setFloat("pointLights[" + std::to_string(i) + "].constant", 1.0f);
        //     shader.setFloat("pointLights[" + std::to_string(i) + "].linear", 0.1f);
        //     shader.setFloat("pointLights[" + std::to_string(i) + "].quadratic", 0.01f);
        // }


        
        // std::vector<std::string> faces{
        //     "res/images/env_cubemap/right.jpg",
        //     "res/images/env_cubemap/left.jpg",
        //     "res/images/env_cubemap/top.jpg",
        //     "res/images/env_cubemap/bottom.jpg",
        //     "res/images/env_cubemap/front.jpg",
        //     "res/images/env_cubemap/back.jpg"
        // };
        
        // stbi_set_flip_vertically_on_load(false);
        // unsigned int cubemapTexture = loadCubemap(faces);
    //


    const unsigned int SHADOW_WIDTH = 1024, SHADOW_HEIGHT = 1024;
    unsigned int depthMapFBO;
    glGenFramebuffers(1, &depthMapFBO);

    unsigned int depthMapTexture;
    glGenTextures(1, &depthMapTexture);
    glBindTexture(GL_TEXTURE_2D, depthMapTexture);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_DEPTH_COMPONENT, SHADOW_WIDTH, SHADOW_HEIGHT, 0, GL_DEPTH_COMPONENT, GL_FLOAT, NULL);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

    glBindFramebuffer(GL_FRAMEBUFFER, depthMapFBO);
    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D, depthMapTexture, 0);
    glDrawBuffer(GL_NONE);
    glReadBuffer(GL_NONE);
    glBindFramebuffer(GL_FRAMEBUFFER, 0);  


    TextureRenderer.use();
    TextureRenderer.setInt("depthMap", 0);

    glm::vec3 lightPos(-2.0f, 4.0f, -1.0f);
    
    while (!glfwWindowShouldClose(window))
    {   
        float currentFrame = (float)glfwGetTime();
        deltaTime=currentFrame-lastFrame;
        lastFrame=currentFrame;

        processInput(window);
        /* Render here */
        glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        //BEGIN render texture
        // 1. first render to depth map
        glm::mat4 lightProjection, lightView;
        glm::mat4 lightSpaceMatrix;
        float near_plane = 1.0f, far_plane = 7.5f;
        lightProjection = glm::ortho(-10.0f, 10.0f, -10.0f, 10.0f, near_plane, far_plane);
        lightView = glm::lookAt(lightPos, glm::vec3(0.0f), glm::vec3(0.0, 1.0, 0.0));
        lightSpaceMatrix = lightProjection * lightView;

        simpleDepthShader.use();
        simpleDepthShader.setMat4("lightSpaceMatrix", lightSpaceMatrix);
        glViewport(0, 0, SHADOW_WIDTH, SHADOW_HEIGHT);
        glBindFramebuffer(GL_FRAMEBUFFER, depthMapFBO);
        glClear(GL_DEPTH_BUFFER_BIT);
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, woodTexture);
        renderScene(simpleDepthShader);


        // GLCall(glBindVertexArray(cubeVAO));  
        // for(unsigned int i = 0; i < 10; i++)
        // {
        //     glm::mat4 model = glm::mat4(1.0f);
        //     model = glm::translate(model, cubePositions[i]);
        //     float angle = 20.0f * i; 
        //     model = glm::rotate(model, glm::radians(angle), glm::vec3(1.0f, 0.3f, 0.5f));
        //     simpleDepthShader.setMat4("model", model);

        //     glDrawArrays(GL_TRIANGLES, 0, 36);
        // }
        //END render texture

        //render quad
        glBindFramebuffer(GL_FRAMEBUFFER, 0);
        glViewport(0, 0, 800, 600);
        glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);

        TextureRenderer.use();
        TextureRenderer.setFloat("near_plane", near_plane);
        TextureRenderer.setFloat("far_plane", far_plane);
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, depthMapTexture);
        GLCall(glBindVertexArray(planeVAO));
        glDrawArrays(GL_TRIANGLES, 0, 6);


        //BEGIN render scene
            // glBindFramebuffer(GL_FRAMEBUFFER, 0);
            // glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
            // glClearColor(0.2f, 0.3f, 0.3f, 1.0f);

            // glm::mat4 projection = camera.GetProjectionMatrix(800, 600, 0.1f, 100.0f);

            // shader.use();
            // shader.setVec3("viewPos", camera.getPosition());
            // shader.setMat4("view", camera.GetViewMatrix());
            // shader.setMat4("projection", projection);

            // //drawing plane
            // GLCall(glBindVertexArray(planeVAO));
            // glm::mat4 model = glm::mat4(1.0f);
            // model = glm::translate(model, glm::vec3(0.0f, -3.0f, 0.0f));
            // model = glm::scale(model, glm::vec3(10.0f, 10.0f, 10.0f));
            // shader.setMat4("model", model);
            // glDrawArrays(GL_TRIANGLES, 0, 6);

            // //drawing cubes
            // GLCall(glBindVertexArray(cubeVAO));  
            // for(unsigned int i = 0; i < 10; i++)
            // {
            //     glm::mat4 model = glm::mat4(1.0f);
            //     model = glm::translate(model, cubePositions[i]);
            //     float angle = 20.0f * i; 
            //     model = glm::rotate(model, glm::radians(angle), glm::vec3(1.0f, 0.3f, 0.5f));
            //     shader.setMat4("model", model);

            //     glDrawArrays(GL_TRIANGLES, 0, 36);
            // }

            // //drawing lights
            // light_shader.use();
            // light_shader.setMat4("view", camera.GetViewMatrix());
            // light_shader.setMat4("projection", projection);
            // GLCall(glBindVertexArray(lightVAO));
            // for(int i=0;i<4;i++)
            // {
            //     glm::mat4 model = glm::mat4(1.0f);
            //     model = glm::translate(model, pointLightPositions[i]);
            //     model = glm::scale(model, glm::vec3(0.2f));
            //     light_shader.setMat4("model", model);
            //     glDrawArrays(GL_TRIANGLES, 0, 36);
            // }

            // //drawing skybox
            // glDepthFunc(GL_LEQUAL);  // change depth function so depth test passes when values are equal to depth buffer's content
            // skybox_shader.use();
            // glm::mat4 view = glm::mat4(glm::mat3(camera.GetViewMatrix())); // remove translation from the view matrix
            // skybox_shader.setMat4("view", view);
            // skybox_shader.setMat4("projection", projection);
            // // skybox cube
            // glBindVertexArray(skyboxVAO);
            // glActiveTexture(GL_TEXTURE0);
            // glBindTexture(GL_TEXTURE_CUBE_MAP, cubemapTexture);
            // glDrawArrays(GL_TRIANGLES, 0, 36);
            // glBindVertexArray(0);
            // glDepthFunc(GL_LESS); // set depth function back to default
        //END render scene


        /* Swap front and back buffers */
        glfwSwapBuffers(window);

        /* Poll for and process events */
        glfwPollEvents();
        // std::cin.get();
    }
    glfwTerminate();
    return 0;
}

unsigned int loadCubemap(std::vector<std::string> faces)
{
    unsigned int textureID;
    glGenTextures(1, &textureID);
    glBindTexture(GL_TEXTURE_CUBE_MAP, textureID);

    int width, height, nrChannels;
    for (unsigned int i = 0; i < faces.size(); i++)
    {
        unsigned char *data = stbi_load(faces[i].c_str(), &width, &height, &nrChannels, 0);
        if (data)
        {
            glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, 
                         0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data
            );
            stbi_image_free(data);
        }
        else
        {
            std::cout << "Cubemap tex failed to load at path: " << faces[i] << std::endl;
            stbi_image_free(data);
        }
    }
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);

    return textureID;
}

void render_object(unsigned int VAO, glm::mat4 model, Shader shader, unsigned int n_verts)
{
    shader.use();
    shader.setMat4("model", model);
    glDrawArrays(GL_TRIANGLES, 0, n_verts);
}
unsigned int loadTexture(char const * path)
{
    unsigned int textureID;
    glGenTextures(1, &textureID);

    int width, height, nrComponents;
    unsigned char *data = stbi_load(path, &width, &height, &nrComponents, 0);
    if (data)
    {
        GLenum format;
        if (nrComponents == 1)
            format = GL_RED;
        else if (nrComponents == 3)
            format = GL_RGB;
        else if (nrComponents == 4)
            format = GL_RGBA;

        glBindTexture(GL_TEXTURE_2D, textureID);
        glTexImage2D(GL_TEXTURE_2D, 0, format, width, height, 0, format, GL_UNSIGNED_BYTE, data);
        glGenerateMipmap(GL_TEXTURE_2D);

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, format == GL_RGBA ? GL_CLAMP_TO_EDGE : GL_REPEAT); // for this tutorial: use GL_CLAMP_TO_EDGE to prevent semi-transparent borders. Due to interpolation it takes texels from next repeat 
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, format == GL_RGBA ? GL_CLAMP_TO_EDGE : GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

        stbi_image_free(data);
    }
    else
    {
        std::cout << "Texture failed to load at path: " << path << std::endl;
        stbi_image_free(data);
    }

    return textureID;
}
void renderScene(const Shader &shader)
{
    // floor
    glm::mat4 model = glm::mat4(1.0f);
    shader.setMat4("model", model);
    glBindVertexArray(planeVAO);
    glDrawArrays(GL_TRIANGLES, 0, 6);
    // cubes
    model = glm::mat4(1.0f);
    model = glm::translate(model, glm::vec3(0.0f, 1.5f, 0.0));
    model = glm::scale(model, glm::vec3(0.5f));
    shader.setMat4("model", model);
    renderCube();
    model = glm::mat4(1.0f);
    model = glm::translate(model, glm::vec3(2.0f, 0.0f, 1.0));
    model = glm::scale(model, glm::vec3(0.5f));
    shader.setMat4("model", model);
    renderCube();
    model = glm::mat4(1.0f);
    model = glm::translate(model, glm::vec3(-1.0f, 0.0f, 2.0));
    model = glm::rotate(model, glm::radians(60.0f), glm::normalize(glm::vec3(1.0, 0.0, 1.0)));
    model = glm::scale(model, glm::vec3(0.25));
    shader.setMat4("model", model);
    renderCube();
}


// renderCube() renders a 1x1 3D cube in NDC.
// -------------------------------------------------
unsigned int cubeVAO = 0;
unsigned int cubeVBO = 0;
void renderCube()
{
    // initialize (if necessary)
    if (cubeVAO == 0)
    {
        float vertices[] = {
            // back face
            -1.0f, -1.0f, -1.0f,  0.0f,  0.0f, -1.0f, 0.0f, 0.0f, // bottom-left
             1.0f,  1.0f, -1.0f,  0.0f,  0.0f, -1.0f, 1.0f, 1.0f, // top-right
             1.0f, -1.0f, -1.0f,  0.0f,  0.0f, -1.0f, 1.0f, 0.0f, // bottom-right         
             1.0f,  1.0f, -1.0f,  0.0f,  0.0f, -1.0f, 1.0f, 1.0f, // top-right
            -1.0f, -1.0f, -1.0f,  0.0f,  0.0f, -1.0f, 0.0f, 0.0f, // bottom-left
            -1.0f,  1.0f, -1.0f,  0.0f,  0.0f, -1.0f, 0.0f, 1.0f, // top-left
            // front face
            -1.0f, -1.0f,  1.0f,  0.0f,  0.0f,  1.0f, 0.0f, 0.0f, // bottom-left
             1.0f, -1.0f,  1.0f,  0.0f,  0.0f,  1.0f, 1.0f, 0.0f, // bottom-right
             1.0f,  1.0f,  1.0f,  0.0f,  0.0f,  1.0f, 1.0f, 1.0f, // top-right
             1.0f,  1.0f,  1.0f,  0.0f,  0.0f,  1.0f, 1.0f, 1.0f, // top-right
            -1.0f,  1.0f,  1.0f,  0.0f,  0.0f,  1.0f, 0.0f, 1.0f, // top-left
            -1.0f, -1.0f,  1.0f,  0.0f,  0.0f,  1.0f, 0.0f, 0.0f, // bottom-left
            // left face
            -1.0f,  1.0f,  1.0f, -1.0f,  0.0f,  0.0f, 1.0f, 0.0f, // top-right
            -1.0f,  1.0f, -1.0f, -1.0f,  0.0f,  0.0f, 1.0f, 1.0f, // top-left
            -1.0f, -1.0f, -1.0f, -1.0f,  0.0f,  0.0f, 0.0f, 1.0f, // bottom-left
            -1.0f, -1.0f, -1.0f, -1.0f,  0.0f,  0.0f, 0.0f, 1.0f, // bottom-left
            -1.0f, -1.0f,  1.0f, -1.0f,  0.0f,  0.0f, 0.0f, 0.0f, // bottom-right
            -1.0f,  1.0f,  1.0f, -1.0f,  0.0f,  0.0f, 1.0f, 0.0f, // top-right
            // right face
             1.0f,  1.0f,  1.0f,  1.0f,  0.0f,  0.0f, 1.0f, 0.0f, // top-left
             1.0f, -1.0f, -1.0f,  1.0f,  0.0f,  0.0f, 0.0f, 1.0f, // bottom-right
             1.0f,  1.0f, -1.0f,  1.0f,  0.0f,  0.0f, 1.0f, 1.0f, // top-right         
             1.0f, -1.0f, -1.0f,  1.0f,  0.0f,  0.0f, 0.0f, 1.0f, // bottom-right
             1.0f,  1.0f,  1.0f,  1.0f,  0.0f,  0.0f, 1.0f, 0.0f, // top-left
             1.0f, -1.0f,  1.0f,  1.0f,  0.0f,  0.0f, 0.0f, 0.0f, // bottom-left     
            // bottom face
            -1.0f, -1.0f, -1.0f,  0.0f, -1.0f,  0.0f, 0.0f, 1.0f, // top-right
             1.0f, -1.0f, -1.0f,  0.0f, -1.0f,  0.0f, 1.0f, 1.0f, // top-left
             1.0f, -1.0f,  1.0f,  0.0f, -1.0f,  0.0f, 1.0f, 0.0f, // bottom-left
             1.0f, -1.0f,  1.0f,  0.0f, -1.0f,  0.0f, 1.0f, 0.0f, // bottom-left
            -1.0f, -1.0f,  1.0f,  0.0f, -1.0f,  0.0f, 0.0f, 0.0f, // bottom-right
            -1.0f, -1.0f, -1.0f,  0.0f, -1.0f,  0.0f, 0.0f, 1.0f, // top-right
            // top face
            -1.0f,  1.0f, -1.0f,  0.0f,  1.0f,  0.0f, 0.0f, 1.0f, // top-left
             1.0f,  1.0f , 1.0f,  0.0f,  1.0f,  0.0f, 1.0f, 0.0f, // bottom-right
             1.0f,  1.0f, -1.0f,  0.0f,  1.0f,  0.0f, 1.0f, 1.0f, // top-right     
             1.0f,  1.0f,  1.0f,  0.0f,  1.0f,  0.0f, 1.0f, 0.0f, // bottom-right
            -1.0f,  1.0f, -1.0f,  0.0f,  1.0f,  0.0f, 0.0f, 1.0f, // top-left
            -1.0f,  1.0f,  1.0f,  0.0f,  1.0f,  0.0f, 0.0f, 0.0f  // bottom-left        
        };
        glGenVertexArrays(1, &cubeVAO);
        glGenBuffers(1, &cubeVBO);
        // fill buffer
        glBindBuffer(GL_ARRAY_BUFFER, cubeVBO);
        glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
        // link vertex attributes
        glBindVertexArray(cubeVAO);
        glEnableVertexAttribArray(0);
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
        glEnableVertexAttribArray(1);
        glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
        glEnableVertexAttribArray(2);
        glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
        glBindBuffer(GL_ARRAY_BUFFER, 0);
        glBindVertexArray(0);
    }
    // render Cube
    glBindVertexArray(cubeVAO);
    glDrawArrays(GL_TRIANGLES, 0, 36);
    glBindVertexArray(0);
}

// renderQuad() renders a 1x1 XY quad in NDC
// -----------------------------------------
unsigned int quadVAO = 0;
unsigned int quadVBO;
void renderQuad()
{
    if (quadVAO == 0)
    {
        float quadVertices[] = {
            // positions        // texture Coords
            -1.0f,  1.0f, 0.0f, 0.0f, 1.0f,
            -1.0f, -1.0f, 0.0f, 0.0f, 0.0f,
             1.0f,  1.0f, 0.0f, 1.0f, 1.0f,
             1.0f, -1.0f, 0.0f, 1.0f, 0.0f,
        };
        // setup plane VAO
        glGenVertexArrays(1, &quadVAO);
        glGenBuffers(1, &quadVBO);
        glBindVertexArray(quadVAO);
        glBindBuffer(GL_ARRAY_BUFFER, quadVBO);
        glBufferData(GL_ARRAY_BUFFER, sizeof(quadVertices), &quadVertices, GL_STATIC_DRAW);
        glEnableVertexAttribArray(0);
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
        glEnableVertexAttribArray(1);
        glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
    }
    glBindVertexArray(quadVAO);
    glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
    glBindVertexArray(0);
}